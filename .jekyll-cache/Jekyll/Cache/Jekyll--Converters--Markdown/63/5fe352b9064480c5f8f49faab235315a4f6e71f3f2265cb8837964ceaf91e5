I",`<h2 id="매칭-점수">매칭 점수</h2>

<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42893">https://programmers.co.kr/learn/courses/30/lessons/42893</a></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="cp">#include &lt;iostream&gt;
#include &lt;regex&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;unordered_map&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">namespace</span> <span class="n">MatchingScore</span>
<span class="p">{</span>
    <span class="k">class</span> <span class="nc">PageUrl</span>
    <span class="p">{</span>
    <span class="nl">public:</span>
        <span class="n">string</span> <span class="n">url</span><span class="p">;</span>
        <span class="n">PageUrl</span><span class="p">(</span><span class="n">string</span> <span class="n">Url</span><span class="p">)</span>
            <span class="o">:</span><span class="n">url</span><span class="p">(</span><span class="n">Url</span><span class="p">)</span> <span class="p">{};</span>
        <span class="n">PageUrl</span><span class="p">()</span> <span class="p">{};</span>

        <span class="kt">bool</span> <span class="k">operator</span><span class="o">&lt;</span><span class="p">(</span><span class="k">const</span> <span class="n">PageUrl</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span> <span class="k">const</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">url</span> <span class="o">&lt;</span> <span class="n">rhs</span><span class="p">.</span><span class="n">url</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">};</span>

    <span class="k">class</span> <span class="nc">Page</span><span class="p">;</span>
    <span class="n">unordered_map</span><span class="o">&lt;</span><span class="n">string</span><span class="p">,</span> <span class="n">Page</span><span class="o">*&gt;</span> <span class="n">pagePool</span><span class="p">;</span>

    <span class="k">class</span> <span class="nc">Page</span>
    <span class="p">{</span>
    <span class="nl">private:</span>

        <span class="n">Page</span><span class="o">*</span> <span class="n">findPageByURL</span><span class="p">(</span><span class="n">PageUrl</span> <span class="n">url</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">pagePool</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">url</span><span class="p">.</span><span class="n">url</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">it</span> <span class="o">!=</span> <span class="n">pagePool</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
                <span class="k">return</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">;</span>
            <span class="k">return</span> <span class="nb">nullptr</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="kt">int</span> <span class="n">calcBasicScore</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">word</span><span class="p">,</span> <span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">html</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//대소문자 구분 x</span>
            <span class="c1">//알파벳을 제외한 문자는 모두 다 '빈칸'으로 취급</span>
            <span class="c1">//aba -&gt; (abab, abababa) X</span>
            <span class="c1">//aba -&gt; (aba@aba) O : 2개 (aba) O : 1개</span>
            <span class="c1">//Regex : \b[Bb][Ll][Ii][Nn][Dd]\b ([]안에는 word의 각 글자가 들어감)</span>
            
            <span class="n">string</span> <span class="n">regex</span> <span class="o">=</span> <span class="s">"[^A-Za-z]"</span><span class="p">;</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">word</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="sc">'a'</span><span class="p">)</span>
                    <span class="n">regex</span> <span class="o">+=</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">()</span> <span class="o">+</span> <span class="sc">'['</span> <span class="o">+</span> <span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="p">(</span><span class="kt">char</span><span class="p">)(</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="sc">'a'</span> <span class="o">-</span> <span class="sc">'A'</span><span class="p">)</span> <span class="o">+</span> <span class="sc">']'</span><span class="p">;</span>
                <span class="k">else</span>
                    <span class="n">regex</span> <span class="o">+=</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">()</span> <span class="o">+</span> <span class="sc">'['</span> <span class="o">+</span> <span class="p">(</span><span class="kt">char</span><span class="p">)(</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="sc">'A'</span> <span class="o">-</span> <span class="sc">'a'</span><span class="p">)</span> <span class="o">+</span> <span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="sc">']'</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">regex</span> <span class="o">+=</span> <span class="s">"[^A-Za-z]"</span><span class="p">;</span>

            <span class="n">std</span><span class="o">::</span><span class="n">regex</span> <span class="n">re</span><span class="p">(</span><span class="n">regex</span><span class="p">);</span>
            <span class="n">std</span><span class="o">::</span><span class="n">smatch</span> <span class="n">match</span><span class="p">;</span>
            <span class="n">string</span> <span class="n">copy</span> <span class="o">=</span> <span class="n">string</span><span class="p">(</span><span class="n">html</span><span class="p">);</span>
            <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            
            <span class="k">while</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">regex_search</span><span class="p">(</span><span class="n">copy</span><span class="p">,</span> <span class="n">match</span><span class="p">,</span> <span class="n">re</span><span class="p">))</span> <span class="p">{</span>
                <span class="n">count</span><span class="o">++</span><span class="p">;</span>
                <span class="n">copy</span> <span class="o">=</span> <span class="n">match</span><span class="p">.</span><span class="n">suffix</span><span class="p">();</span> <span class="c1">//suffix를 따로 해줘야한다니.. 주여</span>
            <span class="p">}</span>
            
            <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">PageUrl</span> <span class="n">getMyUrl</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">html</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//&lt;meta property="og:url" content="https://c.com"/&gt;</span>
            <span class="c1">//정규표현식 쓰기</span>
            <span class="c1">//Regex : &lt;meta property="og\:url" content=".*"\/&gt;</span>
            
            <span class="n">std</span><span class="o">::</span><span class="n">regex</span> <span class="n">re</span><span class="p">(</span><span class="s">"&lt;meta property=</span><span class="se">\"</span><span class="s">og\:url</span><span class="se">\"</span><span class="s"> content=</span><span class="se">\"</span><span class="s">.*</span><span class="se">\"</span><span class="s">\/&gt;"</span><span class="p">);</span>
            <span class="n">std</span><span class="o">::</span><span class="n">smatch</span> <span class="n">match</span><span class="p">;</span>
            <span class="n">string</span> <span class="n">copy</span> <span class="o">=</span> <span class="n">string</span><span class="p">(</span><span class="n">html</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">regex_search</span><span class="p">(</span><span class="n">copy</span><span class="p">,</span> <span class="n">match</span><span class="p">,</span> <span class="n">re</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="n">string</span> <span class="n">url</span> <span class="o">=</span> <span class="n">match</span><span class="p">.</span><span class="n">str</span><span class="p">();</span>
                <span class="n">url</span> <span class="o">=</span> <span class="n">url</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="mi">33</span><span class="p">,</span> <span class="n">url</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
                <span class="n">url</span> <span class="o">=</span> <span class="n">url</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">url</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">"</span><span class="se">\"</span><span class="s">"</span><span class="p">));</span>
                <span class="k">return</span> <span class="n">PageUrl</span><span class="p">(</span><span class="n">url</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Invalid html Error"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
                <span class="k">return</span> <span class="n">PageUrl</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="n">PageUrl</span><span class="o">&gt;</span> <span class="n">getExternalLinks</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">html</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//&lt;a href="https://careers.kakao.com/index"&gt;</span>
            <span class="c1">//href 찾으면 됨.</span>
            <span class="c1">//Regex : href=".*"</span>
            <span class="n">vector</span><span class="o">&lt;</span><span class="n">PageUrl</span><span class="o">&gt;</span> <span class="n">links</span><span class="p">;</span>
 
            <span class="n">std</span><span class="o">::</span><span class="n">regex</span> <span class="n">re</span><span class="p">(</span><span class="s">"href=</span><span class="se">\"</span><span class="s">.*</span><span class="se">\"</span><span class="s">"</span><span class="p">);</span>
            <span class="n">std</span><span class="o">::</span><span class="n">smatch</span> <span class="n">match</span><span class="p">;</span>
            <span class="n">string</span> <span class="n">copy</span> <span class="o">=</span> <span class="n">string</span><span class="p">(</span><span class="n">html</span><span class="p">);</span>

            <span class="k">while</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">regex_search</span><span class="p">(</span><span class="n">copy</span><span class="p">,</span> <span class="n">match</span><span class="p">,</span> <span class="n">re</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="n">string</span> <span class="n">url</span> <span class="o">=</span> <span class="n">match</span><span class="p">.</span><span class="n">str</span><span class="p">();</span>
                <span class="n">url</span> <span class="o">=</span> <span class="n">url</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="n">url</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
                <span class="n">url</span> <span class="o">=</span> <span class="n">url</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">url</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">"</span><span class="se">\"</span><span class="s">"</span><span class="p">));</span>

                <span class="c1">//cout &lt;&lt; url &lt;&lt; endl;</span>
                <span class="n">links</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">PageUrl</span><span class="p">(</span><span class="n">url</span><span class="p">));</span>
                <span class="n">copy</span> <span class="o">=</span> <span class="n">match</span><span class="p">.</span><span class="n">suffix</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">links</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="kt">float</span> <span class="n">getLinkScore</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">basicScore</span> <span class="o">/</span> <span class="n">externalLink</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="p">}</span>

    <span class="nl">public:</span>
        <span class="kt">int</span> <span class="n">basicScore</span><span class="p">;</span>
        <span class="n">PageUrl</span> <span class="n">url</span><span class="p">;</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="n">PageUrl</span><span class="o">&gt;</span> <span class="n">externalLink</span><span class="p">;</span> <span class="c1">//ToDo : Make this Set</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="n">PageUrl</span><span class="o">&gt;</span> <span class="n">referencePages</span><span class="p">;</span> <span class="c1">//ToDo : Make this Set</span>

        <span class="n">Page</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">word</span><span class="p">,</span> <span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">html</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">basicScore</span> <span class="o">=</span> <span class="n">calcBasicScore</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">html</span><span class="p">);</span>
            <span class="n">url</span> <span class="o">=</span> <span class="n">getMyUrl</span><span class="p">(</span><span class="n">html</span><span class="p">);</span>
            <span class="n">externalLink</span> <span class="o">=</span> <span class="n">getExternalLinks</span><span class="p">(</span><span class="n">html</span><span class="p">);</span>
            
            <span class="n">pagePool</span><span class="p">.</span><span class="n">insert</span><span class="p">({</span> <span class="n">url</span><span class="p">.</span><span class="n">url</span><span class="p">,</span> <span class="k">this</span> <span class="p">});</span> <span class="c1">//? 왜 url.url을 전달해야해? 생성자를 불러야해서? 복사생성자 정의해도 url.url로 해야하던데..</span>
        <span class="p">}</span>

        <span class="kt">void</span> <span class="n">addMeToReference</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">externalLink</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">auto</span> <span class="n">p</span> <span class="o">=</span> <span class="n">findPageByURL</span><span class="p">(</span><span class="n">externalLink</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
                <span class="k">if</span><span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="nb">nullptr</span><span class="p">)</span>
                    <span class="n">p</span><span class="o">-&gt;</span><span class="n">referencePages</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">url</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="kt">float</span> <span class="n">getMatchingScore</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">float</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">referencePages</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">Page</span><span class="o">*</span> <span class="n">page</span> <span class="o">=</span> <span class="n">findPageByURL</span><span class="p">(</span><span class="n">referencePages</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span> <span class="c1">//바꿔야함. '내가 가르키는' 페이지가 아니라 '나를 가르키는' 페이지의 값을 계산해야함.</span>
                <span class="k">if</span><span class="p">(</span><span class="n">page</span> <span class="o">!=</span> <span class="nb">nullptr</span><span class="p">)</span>
                    <span class="n">sum</span> <span class="o">+=</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">page</span><span class="o">-&gt;</span><span class="n">basicScore</span> <span class="o">/</span> <span class="n">page</span><span class="o">-&gt;</span><span class="n">referencePages</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="n">sum</span> <span class="o">+=</span> <span class="n">basicScore</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">};</span>

    <span class="kt">int</span> <span class="n">solution</span><span class="p">(</span><span class="n">string</span> <span class="n">word</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">htmls</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

        <span class="c1">//1. init</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="n">Page</span><span class="o">&gt;</span> <span class="n">pages</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">htmls</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">pages</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">Page</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">htmls</span><span class="p">[</span><span class="n">i</span><span class="p">]));</span>
        <span class="p">}</span>

        <span class="c1">//2. Calc reference of each other.</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">pages</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">pages</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">addMeToReference</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">//2. find Maximum</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">pages</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">pages</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">getMatchingScore</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">pages</span><span class="p">[</span><span class="n">answer</span><span class="p">].</span><span class="n">getMatchingScore</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="n">answer</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
    <span class="p">}</span>
    
<span class="p">}</span>
</code></pre></div></div>
:ET