I"<h2 id="threejs-용-glsl-shader-관리하기">three.js 용 glsl shader 관리하기</h2>

<p>이전 포스팅에서 glsl shader를 관리하는 방법에 문제가 있었다.</p>

<p>이전 포스트 : <a href="">https://cliwo.github.io/threejs/2021/01/16/three_configuration.html</a></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">promise_vs</span> <span class="o">=</span> <span class="nx">fetch</span><span class="p">(</span><span class="k">new</span> <span class="nx">Request</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://</span><span class="dl">'</span> <span class="o">+</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">host</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">/assets/glsls/TestJS/vs.vert/</span><span class="dl">'</span><span class="p">)).</span><span class="nx">then</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">text</span><span class="p">());</span>
<span class="kd">const</span> <span class="nx">promise_fs</span> <span class="o">=</span> <span class="nx">fetch</span><span class="p">(</span><span class="k">new</span> <span class="nx">Request</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://</span><span class="dl">'</span> <span class="o">+</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">host</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">/assets/glsls/TestJS/fs.frag/</span><span class="dl">'</span><span class="p">)).</span><span class="nx">then</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">text</span><span class="p">());</span>

<span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span>
    <span class="nx">promise_vs</span><span class="p">,</span>
    <span class="nx">promise_fs</span>
    <span class="p">]).</span><span class="nx">then</span><span class="p">(([</span><span class="nx">vs</span><span class="p">,</span> <span class="nx">fs</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="nx">main</span><span class="p">(</span><span class="nx">vs</span><span class="p">,</span><span class="nx">fs</span><span class="p">)</span>
<span class="p">);</span>
</code></pre></div></div>

<p>기존의 방식은 Request를 써서 http request를 때리는 식이었는데 크게 2가지 문제가 있다.</p>

<ol>
  <li>Mixed content 문제</li>
  <li>url이 만들어지지 않는 문제</li>
</ol>

<h3 id="1-mixed-content-문제">1. Mixed Content 문제</h3>

<p><img src="/assets/images/ThreeJS/2021-01-24-glsl_shader_config/01.png" alt="01" /></p>
<center>(Mixed content 오류시 오류 내용)</center>
<p><br /></p>

<p><strong>https 로 접근하는 페이지에서 http request가 발생했을 때 브라우저가 이를 막아버린다.</strong> 위의 코드를 보면 http request를 보내기 때문에 문제가 생겼었다. 그럼 https 로 바꾸면 되는 쉬운 문제 아닌가? 싶지만… (만약 사이트가 http, https 둘 다 지원한다면)</p>

<h3 id="2-url이-만들어지지-않는-문제">2. url이 만들어지지 않는 문제</h3>

<p>예를 들어 이전 포스팅이었던 ‘ThreeJS - RimLight 와 Phong Shading 구현 (GLSL) #2’ 포스트에서 이미지는 아래의 url로 접근가능하다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://cliwo.github.io/assets/images/ThreeJS/2021-01-21-RimLightDev/07.png
</code></pre></div></div>

<p>하지만 ‘RimLight’포스트에서 사용하려고 했던 checker.png는 아래와 같은 url로 접근할 수 없다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://cliwo.github.io/assets/glsls/RimLight/checker.png/
</code></pre></div></div>

<p>무슨차이인가 싶어서 이것 저것 조사해보다가
Chrome 디버그창에서 실마리를 찾을 수 있었다.</p>

<p><img src="/assets/images/ThreeJS/2021-01-24-glsl_shader_config/02.png" alt="01" /></p>
<center>(assets 폴더 아래 images)</center>
<p><br /></p>

<p>아마도 Jekyll이 markdown을 읽어서 html을 생성할 때는, <strong>assets라는 폴더 안의 모든 자료들을 url로 접근할 수 있게 만들어주는 것이 아니라, 딱 사용 되는 자료들만 url로 접근하게 만드는</strong> 느낌이었다.</p>

<p>즉, http/https 오류를 고쳐도, 접근할 수 없다면 소용이 없다.</p>

<h3 id="해결">해결</h3>

<ol>
  <li>html script tag 사용</li>
  <li>사용할 이미지 markdown에 추가</li>
</ol>

<h3 id="1-html-script-tag-사용">1. html ‘script’ tag 사용</h3>

<p><img src="/assets/images/ThreeJS/2021-01-24-glsl_shader_config/03.png" alt="01" /></p>
<center>(script tag로 shader import)</center>
<p><br /></p>

<p>위와 같이 ‘glpost.html’을 수정해주었다.
html에서 shader를 선언하되, 직접 작성하는게 아니라 source로 부터 읽어오게 만든다. (별개의 파일로 편하게 관리할 수 있게)</p>

<h3 id="2-사용할-이미지-markdown에-추가">2. 사용할 이미지 markdown에 추가</h3>

<p><img src="/assets/images/ThreeJS/2021-01-24-glsl_shader_config/04.png" alt="01" /></p>
<center>(vs, fs가 추가되고, png 추가된 Markdown)</center>
<p><br /></p>

<p>또한 특정 이미지를 사용해야 한다면 (Texture 등) markdown에 추가해주면 끝이다.<br />
이전에는 sources 탭에서 보이지 않던 .png가 보인다.</p>

<p><img src="/assets/images/ThreeJS/2021-01-24-glsl_shader_config/05.png" alt="05" /></p>
<center>(이제 보이는 chekcer.png)</center>
<p><br /></p>

<p>최종 결과 :<br />
<a href="https://cliwo.github.io/threejs/2021/01/18/RimLight.html">https://cliwo.github.io/threejs/2021/01/18/RimLight.html</a></p>

<p>드디어 … ㅠ 그렇게 삽질하던 결과가 remote에서도 잘 보인다. 앞으로도 이거 저거 더 구현해 봐야겠다.</p>
:ET