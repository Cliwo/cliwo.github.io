I"ZT<h2 id="jekyll-blog-에서-threejs-를-써보자">jekyll blog 에서 Three.js 를 써보자!</h2>

<p>이 글의 대상 :</p>
<ol>
  <li>jekyll blog에 <strong>OpenGL Shader</strong> 결과를 바로바로 올리고 싶다. (이미 jekyll blog를 가지고 있다.)</li>
  <li><strong>javascript는 하나도 모르는</strong> 그래픽스 프로그래머</li>
  <li>인스타그램이나 핀터레스트처럼, <strong>내가 만든 쉐이더를 아카이빙 하고 싶다.</strong></li>
</ol>

<p>이 글의 목표 :</p>
<ol>
  <li>jekyll blog에서 three.js를 사용해서 3D scene을 그린다.</li>
  <li>3D scene에 내가 만든 커스텀 glsl shader를 사용한다.</li>
</ol>

<p>목차 :</p>
<ol>
  <li>html 수정하기 (canvas 사용하기)</li>
  <li>three.js를 사용하는 javascript 만들기</li>
  <li>custom shader 붙이기</li>
</ol>

<p>안녕하세요.<br />
이번 포스팅은 three.js를 이용해서 glsl shader를 이용한 3D scene 포스팅을 만드는 법에 대한 내용입니다.</p>

<p>취업 준비를 하면서 포트폴리오를 만들고 있는데, 매번 새로운 포트폴리오를 만드는게 어렵더라구요.
게다가 그래픽스 쪽이면 Visual 적인 부분을 gif 나 video로 보여줘야하는 경우도 많은데 용량 줄이는 것도 만만치 않았습니다.</p>

<p>그래서 블로그에 이런 shader 결과를 바로 보여줄 수 있으면 훨씬 좋지 않을까? 싶어서 시도하게 되었고, 제가 시도한 결과를 정리하는 포스팅을 올리게 되었습니다.</p>

<h3 id="1-html-수정하기-canvas-사용하기">1. html 수정하기 (canvas 사용하기)</h3>

<p>첫 번째는 html수정입니다. 우선 제가 사용하는 blog theme은 이 link에서 확인할 수 있습니다.<br />
(https://github.com/jeffreytse/jekyll-theme-yat)[https://github.com/jeffreytse/jekyll-theme-yat]</p>

<p>jekyll blog는 특정 markdown을 읽어서 post로 만들어줍니다. 특정 md라는 건 아래와 같은 포맷으로 시작하는 md를 의미합니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: post
title:  "jekyll에서 three.js를 써보자!"
date:   2021-01-17 00:12:00 +0900
categories: ThreeJS
tags: [three]
---
</code></pre></div></div>

<p>여기서 layout 키워드가 중요한데요, 제가 이해하기로는 layout에 등록된 html 아래에 markdown 내용을 추가하는 것으로 이해했습니다. <br />
그럼 이 ‘post’를 수정해서, three.js로 만들 3d scene을 그려줄 부분을 추가하면 포스트 안에 3d scene을 그릴 수 있다고 생각했습니다.</p>

<p><img src="assets/images/../../../../_site/assets/images/ThreeJS/2021-01-17-configuration/01.png" alt="01" /></p>
<center>(post.html)</center>
<p><br /></p>

<p>이게 원본 ‘post.html’의 모습입니다.</p>

<p>이제 이 post를 이용해서 ‘glpost’라는 걸 만들어 줍니다.</p>

<p><img src="assets/images/../../../../_site/assets/images/ThreeJS/2021-01-17-configuration/02.png" alt="02" /></p>
<center>(glpost).html)</center>
<p><br /></p>

<p>간단하게 ‘canvas’를 추가하고, width와 height를 지정해주었습니다. 이제 이걸 js 안에서 읽어서 three.js가 render하게 하면 끝입니다.</p>

<h3 id="2-threejs를-사용하는-javascript-만들기">2. three.js를 사용하는 javascript 만들기</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//https://threejs.org/docs/#manual/en/introduction/Installation</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">THREE</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">https://unpkg.com/three@0.124.0/build/three.module.js</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">promise_vs</span> <span class="o">=</span> <span class="nx">fetch</span><span class="p">(</span><span class="k">new</span> <span class="nx">Request</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://</span><span class="dl">'</span> <span class="o">+</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">host</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">/assets/glsls/TestJS/vs.vert/</span><span class="dl">'</span><span class="p">)).</span><span class="nx">then</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">text</span><span class="p">());</span>
<span class="kd">const</span> <span class="nx">promise_fs</span> <span class="o">=</span> <span class="nx">fetch</span><span class="p">(</span><span class="k">new</span> <span class="nx">Request</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://</span><span class="dl">'</span> <span class="o">+</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">host</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">/assets/glsls/TestJS/fs.frag/</span><span class="dl">'</span><span class="p">)).</span><span class="nx">then</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">text</span><span class="p">());</span>

<span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span>
    <span class="nx">promise_vs</span><span class="p">,</span>
    <span class="nx">promise_fs</span>
    <span class="p">]).</span><span class="nx">then</span><span class="p">(([</span><span class="nx">vs</span><span class="p">,</span> <span class="nx">fs</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="nx">main</span><span class="p">(</span><span class="nx">vs</span><span class="p">,</span><span class="nx">fs</span><span class="p">)</span>
<span class="p">);</span>

<span class="kd">var</span> <span class="nx">renderer</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">uniform</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">scene</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">camera</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">clock</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">main</span><span class="p">(</span><span class="nx">vs</span><span class="p">,</span> <span class="nx">fs</span><span class="p">){</span>
    <span class="kd">const</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">#canvas</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">renderer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderer</span><span class="p">({</span><span class="nx">canvas</span><span class="p">});</span>

    <span class="kd">const</span> <span class="nx">fov</span> <span class="o">=</span> <span class="mi">75</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">aspect</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>  <span class="c1">// the canvas default</span>
    <span class="kd">const</span> <span class="nx">near</span> <span class="o">=</span> <span class="mf">0.1</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">far</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
    <span class="nx">camera</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">(</span><span class="nx">fov</span><span class="p">,</span> <span class="nx">aspect</span><span class="p">,</span> <span class="nx">near</span><span class="p">,</span> <span class="nx">far</span><span class="p">);</span>
    <span class="nx">camera</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">z</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

    <span class="nx">scene</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Scene</span><span class="p">();</span>
    <span class="nx">clock</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Clock</span><span class="p">();</span>

    <span class="kd">const</span> <span class="nx">boxWidth</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">boxHeight</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">boxDepth</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">geometry</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">BoxGeometry</span><span class="p">(</span><span class="nx">boxWidth</span><span class="p">,</span> <span class="nx">boxHeight</span><span class="p">,</span> <span class="nx">boxDepth</span><span class="p">);</span>

    <span class="nx">uniform</span> <span class="o">=</span> <span class="p">{</span> <span class="na">time</span><span class="p">:</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">f</span><span class="dl">"</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="mf">1.0</span> <span class="p">}}</span>

    <span class="kd">const</span> <span class="nx">material</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="p">(</span> <span class="p">{</span>
    <span class="na">uniforms</span> <span class="p">:</span> <span class="nx">uniform</span><span class="p">,</span>
    <span class="na">vertexShader</span><span class="p">:</span> <span class="nx">vs</span><span class="p">,</span>
    <span class="na">fragmentShader</span><span class="p">:</span> <span class="nx">fs</span>
    <span class="p">}</span> <span class="p">);</span>

    <span class="kd">const</span> <span class="nx">cube</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span><span class="nx">geometry</span><span class="p">,</span> <span class="nx">material</span><span class="p">);</span>
    <span class="nx">scene</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">cube</span><span class="p">);</span>

    <span class="nx">render</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">render</span><span class="p">()</span>
<span class="p">{</span>
    <span class="nx">requestAnimationFrame</span><span class="p">(</span><span class="nx">render</span><span class="p">)</span>
    <span class="nx">uniform</span><span class="p">.</span><span class="nx">time</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">clock</span><span class="p">.</span><span class="nx">getElapsedTime</span><span class="p">();</span>
    <span class="nx">renderer</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">scene</span><span class="p">,</span> <span class="nx">camera</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>제가 사용한 javascript 입니다. 부분별로 살펴보겠습니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//https://threejs.org/docs/#manual/en/introduction/Installation</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">THREE</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">https://unpkg.com/three@0.124.0/build/three.module.js</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>

<p>먼저 three.js 모듈을 가져오는 부분입니다. 위의 주석 링크에서 module을 바로 사용하고 싶으면 unpkg 에서 module을 가져오라고 해서 바로 적용했습니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">promise_vs</span> <span class="o">=</span> <span class="nx">fetch</span><span class="p">(</span><span class="k">new</span> <span class="nx">Request</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://</span><span class="dl">'</span> <span class="o">+</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">host</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">/assets/glsls/TestJS/vs.vert/</span><span class="dl">'</span><span class="p">)).</span><span class="nx">then</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">text</span><span class="p">());</span>
<span class="kd">const</span> <span class="nx">promise_fs</span> <span class="o">=</span> <span class="nx">fetch</span><span class="p">(</span><span class="k">new</span> <span class="nx">Request</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://</span><span class="dl">'</span> <span class="o">+</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">host</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">/assets/glsls/TestJS/fs.frag/</span><span class="dl">'</span><span class="p">)).</span><span class="nx">then</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">text</span><span class="p">());</span>

<span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span>
    <span class="nx">promise_vs</span><span class="p">,</span>
    <span class="nx">promise_fs</span>
    <span class="p">]).</span><span class="nx">then</span><span class="p">(([</span><span class="nx">vs</span><span class="p">,</span> <span class="nx">fs</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="nx">main</span><span class="p">(</span><span class="nx">vs</span><span class="p">,</span><span class="nx">fs</span><span class="p">)</span>
<span class="p">);</span>
</code></pre></div></div>
<p>이 부분은 아래에서 자세하게 다루겠습니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">main</span><span class="p">(</span><span class="nx">vs</span><span class="p">,</span> <span class="nx">fs</span><span class="p">){</span>
    <span class="kd">const</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">#canvas</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">renderer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderer</span><span class="p">({</span><span class="nx">canvas</span><span class="p">});</span>
    <span class="c1">//...</span>

    <span class="kd">const</span> <span class="nx">material</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="p">(</span> <span class="p">{</span>
    <span class="na">uniforms</span> <span class="p">:</span> <span class="nx">uniform</span><span class="p">,</span>
    <span class="na">vertexShader</span><span class="p">:</span> <span class="nx">vs</span><span class="p">,</span>
    <span class="na">fragmentShader</span><span class="p">:</span> <span class="nx">fs</span>
    <span class="p">}</span> <span class="p">);</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">requestAnimationFrame</span><span class="p">(</span><span class="nx">render</span><span class="p">)</span>
    <span class="nx">uniform</span><span class="p">.</span><span class="nx">time</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">clock</span><span class="p">.</span><span class="nx">getElapsedTime</span><span class="p">();</span>
    <span class="nx">renderer</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">scene</span><span class="p">,</span> <span class="nx">camera</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>나머지 부분은 three.js 기초에 해당하는 부분입니다. (https://threejs.org/docs/#manual/en/introduction/Creating-a-scene)[https://threejs.org/docs/#manual/en/introduction/Creating-a-scene] canvas를 가져오고, scene을 구성하는 geometry와 geometry를 그릴 material을 설정해 줍니다.</p>

<p>여기서 포인트는 glsl로 커스텀한 shader를 그리는 것이 목적이기에 THREE.ShaderMaterial 을 사용했습니다. 
ShaderMaterial은 (http://blog.302chanwoo.com/2016/08/shadermaterial1/
https://medium.com/@sidiousvic/how-to-use-shaders-as-materials-in-three-js-660d4cc3f12a
)[http://blog.302chanwoo.com/2016/08/shadermaterial1/
https://medium.com/@sidiousvic/how-to-use-shaders-as-materials-in-three-js-660d4cc3f12a
] 여기서 참고해서 작성했습니다.</p>

<h3 id="3-custom-shader-붙이기">3. custom shader 붙이기</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">promise_vs</span> <span class="o">=</span> <span class="nx">fetch</span><span class="p">(</span><span class="k">new</span> <span class="nx">Request</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://</span><span class="dl">'</span> <span class="o">+</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">host</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">/assets/glsls/TestJS/vs.vert/</span><span class="dl">'</span><span class="p">)).</span><span class="nx">then</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">text</span><span class="p">());</span>
<span class="kd">const</span> <span class="nx">promise_fs</span> <span class="o">=</span> <span class="nx">fetch</span><span class="p">(</span><span class="k">new</span> <span class="nx">Request</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://</span><span class="dl">'</span> <span class="o">+</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">host</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">/assets/glsls/TestJS/fs.frag/</span><span class="dl">'</span><span class="p">)).</span><span class="nx">then</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">text</span><span class="p">());</span>

<span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span>
    <span class="nx">promise_vs</span><span class="p">,</span>
    <span class="nx">promise_fs</span>
    <span class="p">]).</span><span class="nx">then</span><span class="p">(([</span><span class="nx">vs</span><span class="p">,</span> <span class="nx">fs</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="nx">main</span><span class="p">(</span><span class="nx">vs</span><span class="p">,</span><span class="nx">fs</span><span class="p">)</span>
<span class="p">);</span>
</code></pre></div></div>

<p>마지막 부분입니다.<br />
제가 원했던 것은 glsl shader를 js안에 string으로 두는게 아니라 별도의 파일로 관리하고 싶었습니다.
<img src="assets/images/../../../../_site/assets/images/ThreeJS/2021-01-17-configuration/03.png" alt="03" /></p>
<center>(vs code plugin중 하나인 GLSL Lint)</center>
<p><br /></p>

:ET