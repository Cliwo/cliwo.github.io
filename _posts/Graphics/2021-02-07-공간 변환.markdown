---
layout: post
title:  "공간 변환"
date:   2021-02-07 13:00:00 +0900
categories: Graphics
tags: [graphics, terminology]
---
## 공간 변환

> **Vertex Shader의 '입력 Vertex'의 Space를 NDC Space로 바꿔주는 과정.** 입력이 Object Space상의 Vertex 이면, MVP 변환을 다 해줘야한다. 단, 원래 NDC Space상의 입력이면 아무 변환도 필요 없을 수 있다.

참고 : [http://www.opengl-tutorial.org/kr/beginners-tutorials/tutorial-3-matrices/#%EB%AA%A8%EB%8D%B8-%EB%B7%B0-%ED%94%84%EB%A1%9C%EC%A0%9D%EC%85%98-%ED%96%89%EB%A0%AC](http://www.opengl-tutorial.org/kr/beginners-tutorials/tutorial-3-matrices/#%EB%AA%A8%EB%8D%B8-%EB%B7%B0-%ED%94%84%EB%A1%9C%EC%A0%9D%EC%85%98-%ED%96%89%EB%A0%AC)

### 중요한 이유

그래픽스 프로그래밍을 하면서 다양한 요구사항을 **이 Matrix를 조절하는 것으로 해결할 수 있습니다.**  
ex) 
* Billboard
* Screen Space Particle
* Render Texture (Render Texture의 중요 개념은 공간 변환과는 거리가 멀지만, 공간 변환의 이해가 필요하다.)
* 등등..

또한 Shading 에서도 Vector, Vertex의 연산에서도 **'같은 공간'에 두고 연산을 하는 것**이 중요하기에 공간에 대한 이해가 필요합니다.

### Model Matrix
(Object Space -> World Space) 
> **여러 물체를 하나의 세상을 기준으로 표현하는 것.**

![01](/assets/images/Graphics/2021-02-07-SpaceTransform/01.png)
<center>(Model Matrix Result) </center> <br>

* Object Space : 물체의 중심을 원점으로 하는 공간. **물체마다 자신의 원점이 다르다.**
* World Space : 세상(Scene)의 중심을 원점으로 하는 공간. **물체가 여러 개라도 세상의 원점은 하나.**

간단히 2D Space에서 예를 들면,  
Object Space 기준 좌표는 <x,y> 로 표현하고 World Space 기준 좌표는 (x,y)로 표현한다고 할 때,
모델 위의 점 p <1,0>가 있고, 모델은 World Space 기준으로 (2,2)에 있으면.

![02](/assets/images/Graphics/2021-02-07-SpaceTransform/02.png)
<center>(Model vs World) </center> <br>

* World 기준 p 의 좌표 -> <1,0> + (2, 2) = **(3,2)**
* Object 기준 p의 좌표 -> <1,0> = **<1,0>**

#### Model Matrix Example

보통 Model Matrix는 **TRS Matrix**로 구성됩니다. (Translate, Rotation, Scale Matrix)

결국 **Model의 World 기준 위치, 회전 정도, 크기는 설정하기 나름입니다.**  
Model이 세상의 중심에 그대로 있다고 하고 싶으면 TRS를 단위행렬로 만들어서 보내주면 되는 것이고, <2,0,0> 위치에 두고 싶다 하면 Translate를 <2,0,0> 해주면 됩니다.  
**카메라에 모델들이 어떻게 비춰질 지를 생각해서, 카메라와 모델들의 World 위치를 설정하면 됩니다.**

**Translate**  
참고 : [https://solarianprogrammer.com/2013/05/22/opengl-101-matrices-projection-view-model/](https://solarianprogrammer.com/2013/05/22/opengl-101-matrices-projection-view-model/)  
![03](/assets/images/Graphics/2021-02-07-SpaceTransform/03.png)
<center>(Translate Matrix) </center> <br>

**Rotation**  
![04](/assets/images/Graphics/2021-02-07-SpaceTransform/04.png)
<center>(Rotation Matrix) </center> <br>

**Scale**  
![05](/assets/images/Graphics/2021-02-07-SpaceTransform/05.png)
<center>(Scale Matrix) </center> <br>

### View Matrix 
(World Space -> View Space)
> **세상을 카메라를 기준으로 바라보는 것.**  

![07](/assets/images/Graphics/2021-02-07-SpaceTransform/07.png)
<center>(View Matrix Result) </center> <br>

다른 말로는, 세상을 기준으로 표현된 정점들을 Camera를 기준으로 다시 표현하는 것입니다. 또한 View Matrix는 Camera Matrix라고도 하고 View Space는 Camera Space라고도 합니다.  

이걸 직관적으로 표현하면, 'World'의 원점을 기준으로 정의된 Vertex 들을, 'Camera'의 원점을 기준으로 재정의 하는 것을 의미합니다.  
이를 잘 생각해보면, **'Camera'의 Model Matrix**와 **View Matrix의 관계**를 생각해 볼 수 있습니다.

* **Camera의 Model Matrix** : Camera 기준의 좌표를 World Space로 옮김.
* **View Matrix** : World Space 좌표를 Camera 기준으로 바꿈.
* **결론 : Inverse(Camera의 Model Matrix) = View Matrix**

참고 : [https://www.3dgep.com/understanding-the-view-matrix/#Converting_between_Camera_Transformation_Matrix_and_View_Matrix](https://www.3dgep.com/understanding-the-view-matrix/#Converting_between_Camera_Transformation_Matrix_and_View_Matrix) 

![06](/assets/images/Graphics/2021-02-07-SpaceTransform/06.png)
<center>(Camera의 Model Matrix와 View Matrix의 관계) </center> <br>

(참고로 Camera의 Model Matrix의 S는 의미가 없으므로 카메라의 위치, 회전만 고려하면 됩니다.)

#### Look At Matrix

View Matrix를 만들기 위해 자주쓰이는 개념이 **LookAt** 입니다.  
주로 2~3가지 입력을 받습니다.

1. **회전**만 변경하는 경우 (Camera 객체에 호출 함수로 제공되는 경우가 많습니다.)
   1. forward vector
   2. up vector
2. **회전**과 **위치** 모두 변경하는 경우 (glm의 Look At이 이 방식입니다.)
   1. 카메라의 위치
   2. forward vector
   3. up vector

### Projection Matrix 
(View Space -> Clip Space (NDC Space))
> **카메라의 시야각, 원근법 적용 여부 등을 적용.**

![08](/assets/images/Graphics/2021-02-07-SpaceTransform/08.png)
<center>(Projection Matrix) </center> <br>

참고 : [https://stackoverflow.com/questions/21841598/when-does-the-transition-from-clip-space-to-screen-coordinates-happen](https://stackoverflow.com/questions/21841598/when-does-the-transition-from-clip-space-to-screen-coordinates-happen)


Clip Space와 NDC Space는 다릅니다. Clip Space는 4차원의 공간이고 **Clip Space의 x,y,z를 각각 w로 나눈 것이 NDC Space입니다.**  
다른 의견으로는, 두 공간은 개념적으로 같은 공간이지만 표현 방식만 달리한 것이라는 의견도 있습니다. (Homogeneous coord (4차원), Cartesian coord (3차원))


**NDC 공간은 x,y,z 모두 [-1, 1]의 범위의 unit cube 공간**입니다. 재미있는 것은 NDC 공간은 DirectX에서는 z 범위가 [0,1] 입니다. (이렇게 하면 z-fighting 과 같은 issue에서 이득을 얻을 수 있다고 합니다. ([https://gamedev.stackexchange.com/questions/29018/why-does-opengl-require-all-coordinates-in-1-1-ndc/29020](https://gamedev.stackexchange.com/questions/29018/why-does-opengl-require-all-coordinates-in-1-1-ndc/29020))  
OpenGL도 4.3 이 후 부터는 설정을 통해 z 범위를 [0,1]로 설정할 수 있습니다.


#### Perspective vs Orthogonal
참고 :  
[https://en.wikibooks.org/wiki/GLSL_Programming/Vertex_Transformations](https://en.wikibooks.org/wiki/GLSL_Programming/Vertex_Transformations)  
[https://gamedev.stackexchange.com/questions/120338/what-does-a-perspective-projection-matrix-look-like-in-opengl](https://gamedev.stackexchange.com/questions/120338/what-does-a-perspective-projection-matrix-look-like-in-opengl)  
[https://learnopengl.com/Getting-started/Coordinate-Systems](https://learnopengl.com/Getting-started/Coordinate-Systems)  

![14](/assets/images/Graphics/2021-02-07-SpaceTransform/14.png)
<center>(Perspective vs Orthogonal) </center> <br>

결국 Projection Matrix에서 중요한 건 Projection 방식입니다.  
Projection Matrix는 크게 두 개로 나뉩니다.
* **Perspective** : 원근법 적용
* **Othogonal** : 원근법 적용하지 않음. 

또한 Projection Matrix를 만드는 방법도 다양한데
1. **near, far, right, left, bottom, top** 으로 구하는 방법
2. **fov_width, fov_height, near, far**로 구하는 방법
3. **fov, aspect, near, far**로 구하는 방법  

등이 있습니다.

**Perspective Projection**  

* near, far, right, left, bottom, top 으로 구하는 방법
![11](/assets/images/Graphics/2021-02-07-SpaceTransform/11.png)
<center>(near, far, right, left, bottom, top) </center> <br>

* fov_width, fov_height, near, far로 구하기  
![10](/assets/images/Graphics/2021-02-07-SpaceTransform/10.png)
<center>(fob_w, fov_h, near, far) </center> <br>
(cot 은 tangent의 역수 입니다.)

* fov, aspect, near, far로 구하는 방법  
![12](/assets/images/Graphics/2021-02-07-SpaceTransform/12.png)
<center>(fov, aspect, near, far) </center> <br>
(aspect는 x/y (width / height), fov는 여기서 fov_h에 해당합니다.)

**Orthogonal Projection**

* near, far, right, left, bottom, top 으로 구하는 방법
![13](/assets/images/Graphics/2021-02-07-SpaceTransform/13.png)
<center>(near, far, right, left, bottom, top) </center> <br>


### 정리

![09](/assets/images/Graphics/2021-02-07-SpaceTransform/09.png)
<center>(전체 변환 과정) </center> <br>

[https://en.wikibooks.org/wiki/GLSL_Programming/Vertex_Transformations](https://en.wikibooks.org/wiki/GLSL_Programming/Vertex_Transformations)

Vertex Shader 하나에서 일어나는 과정인데 상당히 기네요 ㅜㅜ.  
정리하자면 위의 이미지 처럼, **VS에서 해주는 것은 Clip Coord 계산**까지입니다. **perpectvie division이나 viewport transformation은 하드웨어**에서 처리하게 됩니다.

이것으로 공간 변환 포스팅 마치겠습니다.
감사합니다.